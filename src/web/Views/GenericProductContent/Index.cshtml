@using EPiServer.Core
@using EPiServer.ServiceLocation
@using EPiServer.Web
@using EPiServer.Web.Routing
@using OxxCommerceStarterKit.Web.Helpers
@model OxxCommerceStarterKit.Web.Models.ViewModels.GenericProductViewModel
@{
    var id = System.Guid.NewGuid();
    var urlResolver = ServiceLocator.Current.GetInstance<UrlResolver>();
    var currentLanguage = Model.CatalogContent.Language.IetfLanguageTag;
    var media = Model.Media;
    var defaultCollapsedState = "collapse";
    bool isInEditMode = Html.IsInEditMode();
    if (isInEditMode)
    {
        defaultCollapsedState = "collapse in";
    }

}
@helper GetImageTag(MediaData media, string size, UrlResolver urlResolver)
{
    var url = urlResolver.GetUrl(media.ContentLink, null, new VirtualPathArguments() { ContextMode = ContextMode.Default });
    var medium = url + "?preset=" + size;
    <img src="~/Content/masterslider/blank.gif" data-src="@medium" />
}
@helper GetThumbImageTag(MediaData media, string size, UrlResolver urlResolver)
{
    var url = urlResolver.GetUrl(media.ContentLink, null, new VirtualPathArguments() { ContextMode = ContextMode.Default }) + "?preset=" + size;
    <img class="ms-thumb" src="@url" />
}

@if (Html.IsInEditMode())
{
    <div class="row">
        <div class="col-xs-2">Show In Search Result:</div>
        <div class="col-xs-2">@Html.PropertyFor(m => m.CatalogContent.ShowInList)</div>
    </div>
}
<!--Shopping Cart Message-->
<section class="cart-message">
    <i class="fa fa-check-square"></i>
    <p class="p-style3">@Model.CatalogContent.DisplayName was successfully added to your cart.</p>
</section><!--Shopping Cart Message Close-->

<section class="catalog-single">
    <div ng-controller="CartController" class="row product" id="@id">
        <div class="col-sm-4">
            @if (media != null && media.Count > 0)
            {
                <div class="prod-gal master-slider" id="prod-gal">
                    @foreach (var file in media)
                    {
                        <div class="ms-slide">
                            @GetImageTag(file, "width320", urlResolver)
                            @GetThumbImageTag(file, "sliderimage", urlResolver)

                        </div>
                    }

                </div>
            }
        </div>
        <div class="col-sm-8 col-md-6 main-product-view" itemscope itemtype="http://schema.org/Product">
            <div class="title">
                <h1 itemprop="name">
                    @Html.PropertyFor(x => x.CatalogContent.DisplayName)
                </h1>

            </div>
            <div class="price">
                @if (Model.GenericVariationViewModel != null)
                {
                    @Html.Partial("_Price", Model.GenericVariationViewModel.PriceViewModel)
                }
            </div>
            @{ double rating = Model.CatalogContent.AverageRating; }

                <div class="rate">
                    <span class="@(rating >= 0.5 ? "active" : "")@(rating == 0.5 ? " half" : "")"></span>
                    <span class="@(rating >= 1.5 ? "active" : "")@(rating == 1.5 ? " half" : "")"></span>
                    <span class="@(rating >= 2.5 ? "active" : "")@(rating == 2.5 ? " half" : "")"></span>
                    <span class="@(rating >= 3.5 ? "active" : "")@(rating == 3.5 ? " half" : "") "></span>
                    <span class="@(rating >= 4.5 ? "active" : "")@(rating == 4.5 ? " half" : "")"></span>
                </div>
            <div class="buttons group">
                @if (Model.GenericVariationViewModel != null)
                {
                    <div>
                        @Html.Partial("_BuyItem", new CartItemModel(Model.GenericVariationViewModel.CatalogContent) { CanBuyEntry = Model.IsSellable })
                    </div>
                }
            </div>
            <div class="variations clearfix">
                <div class="sizes">
                    <div>
                        @using (Html.BeginForm(null,null ))
                        {
                            if (Model.Size != null && Model.Size.Any())
                            {
                                @*@Html.DropDownListFor(x => x.GenericVariationViewModel.CatalogContent.Size, Model.Size, new { @id = "sizesId", Name = "size", ng_model = "product.size", ng_change = "sizeChanged()" })*@
                                @Html.DropDownListFor(x => x.GenericVariationViewModel.CatalogContent.Size, Model.Size, new { @id = "sizesId", Name = "size", @onchange = "this.form.submit();" })
                            }
                        }
                    </div>
                </div>
                <div class="colors">
                    @foreach (var m in Model.AllProductsSameStyle.OrderBy(v => ((GenericProductContent)v.CatalogContent).Color))
                    {
                        <a href="@Url.ContentUrl(m.CatalogContent.ContentLink)" title="@(!string.IsNullOrEmpty(m.CatalogContent.DisplayName) ? m.CatalogContent.DisplayName : m.CatalogContent.Name)">
                            @{ string swatchUrl = Html.AssetSwatch(m.CatalogContent); }
                            @if (!string.IsNullOrEmpty(swatchUrl))
                            {
                                <img src="@swatchUrl" class="@(m.CatalogContent.Code == Model.CatalogContent.Code ? "active" : "")" />
                            }
                            else
                            {
                                @(((GenericProductContent)m.CatalogContent).Color)
                            }
                        </a>
                    }
                </div>
            </div>
            <p>
                @Html.PropertyFor(p => p.CatalogContent.Description)
            </p>
            <p>
                Artnr:
                <span itemprop="productID">
                    @Model.CatalogContent.Code
                </span>

            </p>
            <div class="row">
                <div class="col-lg-4 col-md-4 col-sm-5">
                    @Html.Partial("_SocialBar", new SocialBarViewModel(Html.Translate("/common/product/share")))
                </div>
            </div>

        </div>
        <div>
            @*@Html.PropertyFor(p => p.CatalogContent.AdditionalContent, new { EditContainerClass = "overflow-hidden", CssClass = "clearfix" })*@
        </div>
    </div>






    <script type="text/javascript">
        $(document).ready(function () {
            var p = new commercestarterkit.Product('#@id');
        });
    </script>

</section>
<!--Tabs Widget-->
<section class="tabs-widget">
    <!-- Nav tabs -->
    <ul class="nav nav-tabs">
        <li class="active"><a data-target="#descr" data-toggle="tab">Overview</a></li>
        <li><a data-target="#specs" data-toggle="tab">@Html.Translate("/common/product/details")</a></li>
        <li><a data-target="#reviews" data-toggle="tab">Reviews</a></li>
    </ul>
    <div class="tab-content">
        <div class="tab-pane fade in active" id="descr">
            <div class="container">
                <div class="row">
                    @Html.PropertyFor(x => x.CatalogContent.Overview)
                </div>
            </div>
        </div>
        
        <div class="tab-pane fade" id="specs">
            <div class="container">
                <div class="row">
                    @Html.PropertyFor(x => x.CatalogContent.Details)
                </div>
            </div>
        </div>

        <div class="tab-pane fade" id="reviews">
            <div class="container">
                <div class="row">
                    <div os-reviews data-contentid="@Model.CatalogContent.ContentLink.ID" data-contentlanguage="@currentLanguage"></div>
                </div>
            </div>
        </div>
    </div>
</section><!--Tabs Widget Close-->

@Html.Partial("_SimilarProducts", Model.CatalogContent)


@section Head {
    @if (Model != null)
    {
        <meta property="og:title" content="@Html.AttributeEncode(Model.CatalogContent.DisplayName)" />
        <meta property="og:description" content="@Html.AttributeEncode(Model.CatalogContent.Description)" />
        if (Model.Media != null)
        {
            foreach (var file in Model.Media)
            {
                <meta property="og:image" content="@(urlResolver.GetUrl(file.ContentLink))?preset=listmedium" />
            }
        }
    }
}